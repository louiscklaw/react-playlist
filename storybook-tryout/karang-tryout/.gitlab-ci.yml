image: node:10.16-alpine

stages:
  - install
  - test
  - version
  - publish
  - update

install:
  stage: install
  tags:
    - k8s
  script:
    - yarn install --network-concurrency 1
  artifacts:
    # It is better to use cache instead of artifacts. However, our CI does not support distributed caching on multiple runners.
    # https://docs.gitlab.com/ee/ci/caching/#cache-vs-artifacts
    paths:
      - node_modules/
    expire_in: 10 minutes

test:
  stage: test
  tags:
    - k8s
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  script:
    - yarn install --network-concurrency 1
    - yarn test-coverage

version:
  stage: version
  only:
    refs:
      - master@lalamove/karang
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /DOC:/
    refs:
      - schedules
  script:
     - apk update
     - apk -v --update add git openssh
     - mkdir ~/.ssh
     - printf '%s\n' "$SSH_KEY" > ~/.ssh/id_rsa
     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
     - chmod 600 -R ~/.ssh
     - REMOTE_URL=`git remote get-url --push origin`
     - REMOTE_URL=${REMOTE_URL//*"@git.easygroup.co"/"ssh://git@git.easygroup.co:12888"}
     - git config user.email "$GITLAB_USER_EMAIL"
     - git config user.name "$GITLAB_USER_NAME"
     - case "$CI_COMMIT_TITLE" in "MAJOR:"*) npm version major;; "MINOR:"*) npm version minor;; *) npm version patch;; esac
     - git push $REMOTE_URL HEAD:$CI_COMMIT_REF_NAME --follow-tags
     - echo "Version updated"

publish:
  stage: publish
  tags:
    - k8s
  only:
    refs:
      - master@lalamove/karang
    variables:
      - $CI_COMMIT_MESSAGE =~ /DOC:/
  except:
    refs:
      - schedules
  script:
    - yarn install --network-concurrency 1
    - npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
    - npm publish --access public
    - echo "Publish completed"

storybook:
  stage: publish
  tags:
    - k8s
  only:
    refs:
      - master@lalamove/karang
    variables:
      - $CI_COMMIT_MESSAGE =~ /DOC:/
  except:
    refs:
      - schedules
  environment:
    name: storybook
    url: https://ui.lalamove.com/storybook
  script:
    - apk -v --update add python py-pip
    - pip install awscli --upgrade
    - yarn install --network-concurrency 1
    - yarn storybook:build
    - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY aws s3 cp .out $S3_URL/storybook --recursive
    - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY aws s3 ls $S3_URL/storybook --recursive
    - echo "Upload completed"

styleguide:
  stage: publish
  tags:
    - k8s
  only:
    refs:
      - master@lalamove/karang
    variables:
      - $CI_COMMIT_MESSAGE =~ /DOC:/
  except:
    refs:
      - schedules
  environment:
    name: doc
    url: https://ui.lalamove.com
  script:
    - apk -v --update add python py-pip
    - pip install awscli --upgrade
    - yarn install --network-concurrency 1
    - yarn doc:build
    - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY aws s3 cp styleguide $S3_URL --recursive
    - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY aws s3 ls $S3_URL --recursive
    - echo "Upload completed"

renovate:
  image: docker:dind
  stage: update
  tags:
    - k8s
  services:
    - docker:dind
  only:
    refs:
      - schedules
  variables:
    privileged: "true"
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker run --network=host renovate/renovate:slim --platform gitlab --token $GITLAB_API_TOKEN --endpoint https://git.easygroup.co/api/v4 $CI_PROJECT_PATH
